"-- NeoBundle --------------------------------------------------------------
filetype off  " Required for Vundle to operate correctly
set encoding=utf-8

if has('vim_starting')
    set nocompatible               " Be iMproved
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Recommended to install
NeoBundle 'Shougo/vimproc'

" My Plugins
NeoBundle 'tomasr/molokai'

NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'ap/vim-css-color'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'othree/html5.vim'
NeoBundle 'gidj/vim-csyn'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'SirVer/ultisnips' 
NeoBundle 'honza/vim-snippets'
NeoBundle 'Valloric/YouCompleteMe' 
NeoBundle 'scrooloose/syntastic'
NeoBundle 'epeli/slimux'
"NeoBundle 'jpalardy/vim-slime'
NeoBundle 'oblitum/rainbow'
NeoBundle 'Yggdroot/indentLine'
NeoBundle 'hdima/python-syntax'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'jmcantrell/vim-virtualenv'
"-- End NeoBundle --------------------------------------------------------

"-- Filetype Options ----------------------------------------------------
filetype on
filetype plugin indent on
syntax on
let mapleader="," " Change the leader to the comma character

if has("autocmd")
    "autocmd FileType * set tabstop=2|set shiftwidth=2|set noexpandtab
    " Python files
    autocmd Filetype python setlocal ts=4 sts=4 sw=4 et 
    " HTML files
    "autocmd Filetype html,css setlocal ts=2 sts=2 sw=2 expandtab
    " C files
    autocmd Filetype c,h setlocal foldmethod=syntax ts=2 sts=2 sw=2 expandtab 
    " make files 
    autocmd FileType make setlocal noexpandtab
    " Scheme- and Lisp-style files
    autocmd Filetype lisp,scheme setlocal lisp "foldmethod=syntax
    " Ruby
    autocmd FileType ruby,eruby setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1 
    autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
endif 
"-- End Filetype Options ------------------------------------------------

python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

set t_Co=256
set background=dark " Set the background
colorscheme molokai " Set the theme

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

set backspace=indent,eol,start  " Let backspace cross over end of line
set modeline
set tabstop=4 expandtab shiftwidth=4 softtabstop=4 " Default to 4-space tabs, written in spaces

set splitright " Vertical split to the right
set splitbelow " Horizontal split below

set hlsearch " Hightlight search items
set incsearch " Hightlight search items as they are searched for
set showmatch 
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

set number " Activate line numbering on the left side of the screen
highlight LineNr ctermfg=DarkGrey

set updatetime=2000 " This has syntastic update every second instead of every two
"set synmaxcol=120 " This stops syntax highlighting from trying after column 120
set cursorline " Turn on highlighting of active line:
"set relativenumber

" Set the color of the IndentLine
let g:indentLine_color_term = 234 
let g:indentLine_char = '│'

set mouse=a " Turn on mouse mode, for terminals that can use it

set listchars=tab:▸\ ,eol:¬  " Use the same symbols as TextMate for tabstops and EOLs
"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

"-- Powerline -----------------------------------------------------------
" Removes delay when exiting Insert Mode
if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

set laststatus=2 " Activate persistent status line:
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
let g:Powerline_symbols = 'fancy'
"-- End Powerline--------------------------------------------------------

"-- Suround -------------------------------------------------------------
"For Django 
let b:surround_{char2nr("v")} = "{{ \r }}"
let b:surround_{char2nr("{")} = "{{ \r }}"
let b:surround_{char2nr("%")} = "{% \r %}"
let b:surround_{char2nr("b")} = "{% block \1block name: \1 %}\r{% endblock %}"
let b:surround_{char2nr("i")} = "{% if \1condition: \1 %}\r{% endif %}"
let b:surround_{char2nr("w")} = "{% with \1with: \1 %}\r{% endwith %}"
let b:surround_{char2nr("f")} = "{% for \1for loop: \1 %}\r{% endfor %}"
let b:surround_{char2nr("c")} = "{% comment %}\r{% endcomment %}"
"-- End Suround ---------------------------------------------------------


"-- Syntastic -----------------------------------------------------------
let g:syntastic_c_compiler = 'clang'
let g:syntastic_c_compiler_options = '-std=c11'
"let g:syntastic_c_checkers=['gcc']
let g:loaded_syntastic_c_gcc_checker = 1 

let g:syntastic_python_checkers=['pylint']

let g:syntastic_check_on_open = 1 " Check on loading the buffer
let g:syntastic_check_on_wq=0 " Don't check on closing the buffer
let g:syntastic_error_symbol= '>' " 'X'  '✗'
let g:syntastic_warning_symbol='⚠'
"-- End Syntastic -------------------------------------------------------

"-- YouCompleteMe -------------------------------------------------------
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_allow_changing_updatetime = 0 " This lets the 1 second option above stand
let g:ycm_autoclose_preview_window_after_completion=1
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

" This makes YouCompleteMe and UltiSnips work together well
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
"-- End YouCompleteMe ---------------------------------------------------

"-- Rainbow Parentheses -------------------------------------------------
let g:rainbow_active = 1 
let g:rainbow_operators = 1 
let g:rainbow_guifgs = [
    \ '#458588',
    \ '#b16286',
    \ '#cc241d',
    \ '#d65d0e',
    \ '#458588',
    \ '#b16286',
    \ '#cc241d',
    \ '#d65d0e',
    \ '#458588',
    \ '#b16286',
    \ '#cc241d',
    \ '#d65d0e',
    \ '#458588',
    \ '#b16286',
    \ '#cc241d',
    \ '#d65d0e',
    \ ]
"-- End Rainbow Parentheses ---------------------------------------------

"-- Gundo Options -------------------------------------------------------
nnoremap <F5> :GundoToggle<CR>
"-- End Gundo Options ---------------------------------------------------

"-- Tabar Options -------------------------------------------------------
nnoremap <F8> :TagbarToggle<CR>
"-- End Tabar Options ---------------------------------------------------

"-- Keymapping ----------------------------------------------------------
" This makes the space bar toggle folding on and off.
noremap <Space> za 
vnoremap . :norm.<CR>
"-- End Keymapping ------------------------------------------------------

"-- Slimux --------------------------------------------------------------
map <C-c><C-c> :SlimuxREPLSendLine<CR>
vmap <C-c><C-c> :SlimuxREPLSendSelection<CR>
"-- End Slimux ----------------------------------------------------------
