"-- NewBundle --------------------------------------------------------------
filetype off  " Required for Vundle to operate correctly
set encoding=utf-8

if has('vim_starting')
    set nocompatible               " Be iMproved
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Recommended to install
NeoBundle 'Shougo/vimproc'

" My Plugins
NeoBundle 'tomasr/molokai'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'Shougo/neosnippet.vim' 
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'tpope/vim-surround'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'jpalardy/vim-slime'
NeoBundle 'oblitum/rainbow'
NeoBundle 'Yggdroot/indentLine'
NeoBundle 'pfdevilliers/Pretty-Vim-Python'
NeoBundle 'scrooloose/nerdcommenter'

"- End NeoBundle ---------------------------------------------------------

syntax on
filetype plugin indent on
let mapleader="," " Change the leader to the comma character

set background=dark " Set the background
colorscheme molokai " Set the theme

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

set backspace=indent,eol,start  " Let backspace cross over end of line
set modeline
set tabstop=4 expandtab shiftwidth=4 softtabstop=4 " Default to 4-space tabs, written in spaces

set splitright " Vertical split to the right
set splitbelow " Horizontal split below

set hlsearch " Hightlight search items
set incsearch " Hightlight search items as they are searched for
set showmatch 
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

set number " Activate line numbering on the left side of the screen
highlight LineNr ctermfg=DarkGrey

set updatetime=1000 " This has syntastic update every second instead of every two
set synmaxcol=120 " This stops syntax highlighting from trying after column 120
set cursorline " Turn on highlighting of active line:
set relativenumber

" Set the color of the IndentLine
let g:indentLine_color_term = 234 
let g:indentLine_char = '│'

set mouse=a " Turn on mouse mode, for terminals that can use it

set listchars=tab:▸\ ,eol:¬  " Use the same symbols as TextMate for tabstops and EOLs
"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

"-- Powerline -----------------------------------------------------------
" Removes delay when exiting Insert Mode
if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

set laststatus=2 " Activate persistent status line:
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
let g:Powerline_symbols = 'fancy'
"-- End Powerline--------------------------------------------------------

"-- Syntastic -----------------------------------------------------------
"let g:syntastic_python_checkers=['pylint'] " Requires pylint
let g:syntastic_check_on_open = 1 " Check on loading the buffer
let g:syntastic_check_on_wq=0 " Don't check on closing the buffer
let g:syntastic_error_symbol= 'X' " '✗'
let g:syntastic_warning_symbol='⚠'
"-- End Syntastic -------------------------------------------------------

" Plugin key-mappings.
 imap <C-k>     <Plug>(neosnippet_expand_or_jump)
 smap <C-k>     <Plug>(neosnippet_expand_or_jump)
 xmap <C-k>     <Plug>(neosnippet_expand_target)

" " SuperTab like snippets behavior.
 imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
 \ "\<Plug>(neosnippet_expand_or_jump)"
 \: pumvisible() ? "\<C-n>" : "\<TAB>"
 smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
 \ "\<Plug>(neosnippet_expand_or_jump)"
 \: "\<TAB>"

" " For snippet_complete marker.
 if has('conceal')
     set conceallevel=2 concealcursor=i
 endif


"-- YouCompleteMe -------------------------------------------------------
"let g:ycm_confirm_extra_conf = 0
"let g:ycm_allow_changing_updatetime = 0 " This lets the 1 second option above stand
"let g:ycm_autoclose_preview_window_after_completion=1
"nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

" This makes YouCompleteMe and UltiSnips work together well
"let g:UltiSnipsExpandTrigger="<c-j>"
"let g:UltiSnipsJumpForwardTrigger="<c-j>"
"let g:UltiSnipsJumpBackwardTrigger="<c-k>"
"-- End YouCompleteMe ---------------------------------------------------

"-- Rainbow Parentheses -------------------------------------------------
let g:rainbow_active = 1 
let g:rainbow_operators = 1 
let g:rainbow_guifgs = [
    \ '#458588',
    \ '#b16286',
    \ '#cc241d',
    \ '#d65d0e',
    \ '#458588',
    \ '#b16286',
    \ '#cc241d',
    \ '#d65d0e',
    \ '#458588',
    \ '#b16286',
    \ '#cc241d',
    \ '#d65d0e',
    \ '#458588',
    \ '#b16286',
    \ '#cc241d',
    \ '#d65d0e',
    \ ]
"-- End Rainbow Parentheses ---------------------------------------------

"-- Filetype Options ----------------------------------------------------
if has("autocmd")
    " Options for C files
    autocmd Filetype c,h setlocal ts=2 sts=2 sw=2 expandtab
    " Options for make files 
    autocmd FileType make setlocal noexpandtab
    " Scheme- and Lisp-style files
    autocmd Filetype lisp,scheme setlocal lisp "foldmethod=syntax
endif 
"-- End Filetype Options ------------------------------------------------

"-- Keymapping ----------------------------------------------------------
" This makes the space bar toggle folding on and off.
noremap <Space> za 
"-- End Keymapping ------------------------------------------------------

"-- Vim Slime -----------------------------------------------------------
let g:slime_target = "tmux" " Have vim-slime use tmux instead of screen
"-- End Vim Slime -------------------------------------------------------
